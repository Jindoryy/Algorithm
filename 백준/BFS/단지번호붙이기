"""
1. 아이디어
- 2중 for -> 값 '1' && 방문x -> BFS
- BFS 돌면서 방문한 횟수를 체크한다 = 단지에 속하는 집의 개수
- BFS가 끝나면 빈 리스트에 return받은 값을 집어넣고 마지막에 오름차순으로 출력한다.

2. 시간복잡도
- BFS : O(V+E)
- V : N*N = 25 * 25 = 625(N과 N의 최대값)
- E : 4V(한 정점에서 간선의 최대 개수 : 4) = 4 * 625 = 2500 < 2억 (1초에 2억개 연산)

3. 자료구조
- 단지 : str[][] 이용 -> 숫자를 연속해서 입력받기 때문에 str사용
- 방문여부 : bool[][] 이용
- 단지에 속하는 집 개수 : [] 이용
- Queue-deque라이브러리(BFS) 이용
"""

from collections import deque
import sys
input = sys.stdin.readline

n = int(input())
miro = [list(input().rstrip()) for _ in range(n)]
chk = [[False] * n for _ in range(n)]
cpx = [] # 단지

dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]

def bfs(x, y): # bfs를 돌면서 방문할때마다 값을 갱신한다.
    q = deque([(x, y)])
    house = 1
    while q:
        px, py = q.popleft()
        for k in range(4):
            mx = px + dx[k]
            my = py + dy[k]
            if 0 <= mx < n and 0 <= my < n:
                if miro[mx][my] == '1' and not chk[mx][my]:
                    chk[mx][my] = True
                    house += 1
                    q.append((mx, my))
    return house

for i in range(n):
    for j in range(n):
        if miro[i][j] == '1' and not chk[i][j]:
            miro[i][j] = 0
            chk[i][j] = True
            cpx.append(bfs(i, j)) # bfs에서 return된 값은 단지 내 집의 총 개수, 여기선 총 3번 bfs가 호출됨

cpx.sort()

print(len(cpx))
for i in cpx:
    print(i)

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

"""
1. 아이디어
- 방문했으면 방문여부를 확인하는 변수를 별도로 생성하지 않고 2를 대입해서 방문여부를 체크한다.
2. 시간복잡도
- BFS : O(V+E)
- V : N * N = N^2
- E : N^2 * 4
- V + E = 5N^2 = N^2(상수무시) = 625 (5<=N<=25)
3. 자료구조
- 그래프 저장 : int[][]
- 결과값저장, 방향벡터 : int[]
- 기타 변수(입력값, 단지 개수) : int
"""

import sys
input = sys.stdin.readline

from collections import deque

n = int(input())
home = [list(input().strip()) for _ in range(n)]
ans = []

dx, dy = [0, 0, -1, 1], [-1, 1, 0, 0]

def bfs(x, y):
    home[x][y] = 2
    cnt = 1
    q = deque([(x, y)])

    while q:
        px, py = q.popleft()
        for k in range(4):
            mx = px + dx[k]
            my = py + dy[k]
            if 0 <= mx < n and 0 <= my < n:
                if home[mx][my] == '1':
                    home[mx][my] = 2
                    cnt += 1
                    q.append((mx, my))

    return cnt

for i in range(n):
    for j in range(n):
        if home[i][j] == '1':
            res = bfs(i, j)
            ans.append(res)

print(len(ans))
for i in sorted(ans):
    print(i)
