"""
1. 아이디어
- 높이가 1 이상 100 이하 이므로 높이의 모든 경우에 대해서 bfs로 안전영역을 탐색하고 안전영역의 최댓값을 갱신해 나간다.
2. 시간복잡도
- bfs : O(V+E)
- V : N * N = N^2
- E : 4 * V = 4N^2
- V+E : 5N^2 = N^2(상수무시) = 100 * 100 = 10000
- 높이 1이상, 100이하의 모든경우에 대해 탐색
- 100 * 10000 = 1000000 < 2억 (1초)
"""

import sys
input = sys.stdin.readline

from collections import deque

n = int(input())
spot = [list(map(int, input().split())) for _ in range(n)]
visited = [[False] * n for _ in range(n)]
rain_height = max(max(spot)) # 현재 지역의 최대 높이를 구한다. -> 그 이상을 넘어 비가 오는 경우는 고려할 필요가 없다.
ans = 0

dx, dy = [0, 0, -1, 1], [-1, 1, 0, 0]

def bfs(x, y):
    visited[x][y] = True
    q = deque([(x, y)])

    while q:
        px, py = q.popleft()
        for k in range(4):
            mx = px + dx[k]
            my = py + dy[k]
            if 0 <= mx < n and 0 <= my < n:
                if spot[mx][my] > rain_height and not visited[mx][my]:
                    visited[mx][my] = True
                    q.append((mx, my))

while rain_height >= 0: # 강수량을 현재 지역의 최대 높이에서부터 물에 안잠기는 높이(0) 까지 반복한다. (완전탐색)

    cnt = 0 # 안전영역의 개수

    for i in range(n):
        for j in range(n):
            if spot[i][j] > rain_height and not visited[i][j]: # 현재 지역의 높이가 강수량보다 높고 방문하지 않았다면 안전지역이다.
                bfs(i, j)
                cnt += 1  # bfs에서 탐색하면서 인접한 지역을 방문체크 할 것이므로 호출된 횟수는 곧, 안전영역의 개수를 의미한다.

    # 강수량이 1 낮아진 후에 다시 탐색하기 위해서 방문여부를 전부 초기화 해준다.
    for i in range(n):
        for j in range(n):
            visited[i][j] = False

    rain_height -= 1

    ans = max(ans, cnt) # 안전영역의 최댓값을 갱신해 나간다.

print(ans)
