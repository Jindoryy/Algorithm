"""
틀린 아이디어
1. 따로 2차원 배열을 만들어서 최소거리를 세면 그게 곧 다 녹아 없어지는 시간하고 같다.
2. 녹기 하시간 전에 남아있는 치즈 조각의 개수는 (다녹아 없어진 시간 - 1)의 개수를 출력하면 된다.

맞는 아이디어
1. (0, 0) 부터 bfs를 탐색하면서 상하좌우를 확인하여 공기(0)이면 큐에 넣어 계속 탐색을 한다.
그러다 치즈(1)를 만나면 치즈가 있던 자리를 0으로 만들고 방문처리를 한다.
한번의 탐색이 끝나면 치즈가 녹은 개수를 빈 리스트에 집어넣고 개수를 반환한다.
치즈가 녹은 개수가 0이면 다 녹았다는 말이므로 탐색을 종료한다.
"""

from sys import stdin
from collections import deque
input = stdin.readline

n, m = map(int, input().split())
map = [ list(map(int, input().split())) for _ in range(n) ]
time = 0 # 치즈가 녹는 시간
cheeze = [] # 치즈가 녹은 개수

dx, dy = [0, 0, -1, 1], [-1, 1, 0, 0]

def bfs(x, y): # bfs로 탐색하면서 치즈가 녹는 개수를 반환할 것이다.
    q = deque([(x, y)])
    visited = [ [False] * m for _ in range(n) ]
    visited[x][y] = True
    cnt = 0

    while q:
        px, py = q.popleft()

        for k in range(4):
            mx = px + dx[k]
            my = py + dy[k]
            if 0 <= mx < n and 0 <= my < m:
                if map[mx][my] == 0 and not visited[mx][my]: # 다음 이동할 곳이 공기(0)라면 큐에 집어넣고 계속 탐색한다.
                    visited[mx][my] = True
                    q.append((mx, my))
                elif map[mx][my] == 1 and not visited[mx][my]: # 다음 이동할 곳이 치즈(1)라면 방문처리를 하고 치즈를 녹인다.
                    map[mx][my] = 0
                    visited[mx][my] = True
                    cnt += 1

    cheeze.append(cnt) # 치즈가 녹은 개수를 빈 리스트에 집어넣는다.
    return cnt

while 1:
    time += 1 # 한번 bfs를 탐색할때마다 치즈가 녹아나가므로 시간을 +1씩 해준다.
    melting_cnt = bfs(0, 0)

    if melting_cnt == 0:
        break

print(time-1) # 마지막에는 치즈가 다 녹은 상태이므로 의미없는 time += 1이 되었으니 -1을 해서 출력해준다.
print(cheeze[-2]) # 치즈가 다 녹기 한시간 전에 개수는 [-2]에 저장되어 있다.
