"""
1. 아이디어
- 2중 for -> 값 '1' && 방문x -> BFS
- BFS 돌면서 미로판에 값을 갱신

2. 시간복잡도
- BFS : O(V+E)
- V : N*M = 2 * 500 = 1000(N과 M의 최대값)
- E : 4V(한 정점에서 간선의 최대 개수 : 4) = 4 * 1000 = 4000 < 2억 (1초에 2억개 연산)

3. 자료구조
- 미로 : str[][] 이용 -> 숫자를 연속해서 입력받기 때문에 str사용
- 방문여부 : bool[][] 이용
- Queue-deque라이브러리(BFS) 이용
"""

from collections import deque
import sys
input = sys.stdin.readline

n, m = map(int, input().split())
miro = [list(input().rstrip()) for _ in range(n)]
chk = [[False] * m for _ in range(n)]

dx = [0, 0, -1, 1]
dy = [-1, 1, 0, 0]

def bfs(x, y): # bfs를 돌면서 방문할때마다 값을 갱신한다.
    q = deque([(x, y)])
    miro[0][0] = 1
    while q:
        px, py = q.popleft()
        for k in range(4):
            mx = px + dx[k]
            my = py + dy[k]
            if 0 <= mx < n and 0 <= my < m:
                if miro[mx][my] == '1' and not chk[mx][my]:
                    chk[mx][my] = True
                    miro[mx][my] = miro[px][py] + 1
                    q.append((mx, my))

for i in range(n):
    for j in range(m):
        if miro[i][j] == '1' and not chk[i][j]:
            miro[i][j] = 0
            chk[i][j] = True
            bfs(i, j)

print(miro[n-1][m-1])

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

"""
1. 아이디어
- 처음 풀때와는 다르게 visited 변수를 써야 할 필요성을 못느꼈다.
  -> if miro[mx][my] == '1': 이 자체가 이미 방문하지 않았음을 의미하니깐. (방문을 했다면 최단거리의 숫자가 들어있을 것이다.)
- if 0 <= mx < n and 0 <= my < m: 문구를 까먹었다. 항상 벽에 부딪히는 경우까지 생각해주자.
"""

import sys
input = sys.stdin.readline

from collections import deque

n, m = map(int, input().split())
miro = [list(input().strip()) for _ in range(n)]

dx, dy = [0, 0, -1, 1], [-1, 1, 0, 0]

def bfs(x, y):
    miro[x][y] = 1
    q = deque([(x, y)])

    while q:
        px, py = q.popleft()
        for k in range(4):
            mx = px + dx[k]
            my = py + dy[k]
            if 0 <= mx < n and 0 <= my < m:
                if miro[mx][my] == '1':
                    miro[mx][my] = miro[px][py] + 1
                    q.append((mx, my))

bfs(0, 0)

print(miro[n-1][m-1])
