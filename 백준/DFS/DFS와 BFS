from collections import deque # bfs의 queue를 사용하기 위해 import

n, m, start = map(int, input().split())
graph = [[] for _ in range(n+1)] # 정점 0을 제외한 그래프 생성

for _ in range(m): # 인접리스트 입력 받기
    a, b = map(int, input().split())
    graph[a].append(b)
    graph[b].append(a)

for i in range(1, n+1): # 테스트케이스 2번에 맞추기 위해서는 정렬해줘야함(정렬안하면 순회 순서가 달라서 테스트케이스에 안맞음)
    graph[i].sort()

def dfs(graph, visited, start): # 재귀를 이용한 dfs 구현
    visited[start] = True
    print(start, end=" ")
    for x in graph[start]:
        if not visited[x]:
            dfs(graph, visited, x)

def bfs(graph, visited, start): # 큐를 이용한 bfs 구현
    visited[start] = True
    q = deque([start])
    while q:
        v = q.popleft()
        print(v, end=" ")
        for x in graph[v]:
            if not visited[x]:
                visited[x] = True
                q.append(x)

visited = [False] * (n+1)
dfs(graph, visited, start)
print()
visited = [False] * (n+1) # dfs와 bfs를 동시 구현하는 문제이기 때문에 위의 dfs를 다 돌면 방문 여부를 초기화 해주어야함
bfs(graph, visited, start)
