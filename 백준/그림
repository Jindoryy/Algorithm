"""
1. 아이디어
- 2중 for -> 값 1 && 방문x -> BFS
- BFS 돌면서 그림 +1 최대값을 갱신

2. 시간복잡도
- BFS : O(V+E)
- V : N*M = 500 * 500 = N과 M의 최대값
- E : 4V(한 정점에서 간선의 최대 개수 : 4) = 4 * 500 * 500 = 100만 < 2억 (1초에 2억개 연산)

3. 자료구조
- 그래프 전체 지도 : int[][] 이용
- 방문여부 : bool[][] 이용
- Queue(BFS) 이용
"""

import sys
input = sys.stdin.readline

n, m = map(int, input().split())
map = [list(map(int, input().split())) for _ in range(n)]
chk = [[False] * m for _ in range(n)]

cnt = 0 # 그림 개수
maxv = 0 # 그림 넓이

dy = [0, 1, 0, -1] # 동 남 서 북
dx = [1, 0, -1, 0]

def bfs(y, x):
    rs = 1
    q = [(y, x)]
    while q:
        ey, ex = q.pop()
        for k in range(4):
            ny = ey + dy[k]
            nx = ex + dx[k]
            if 0 <= ny < n and 0 <= nx < m:
                if map[ny][nx] == 1 and chk[ny][nx] == False:
                    rs += 1
                    chk[ny][nx] = True
                    q.append((ny, nx))
    return rs

for j in range(n):
    for i in range(m):
        if map[j][i] == 1 and chk[j][i] == False:
            chk[j][i] = True
            # 전체 그림 개수 + 1
            cnt += 1
            # BFS를 이용해서 그림 넓이를 구해주고 최대값 갱신
            maxv = max(maxv, bfs(j, i))

print(cnt)
print(maxv)
